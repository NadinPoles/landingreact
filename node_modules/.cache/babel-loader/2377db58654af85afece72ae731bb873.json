{"ast":null,"code":"import React, { createElement } from 'react';\nimport { useLocation, Route, matchPath } from 'react-router-dom';\nvar joinPaths = function joinPaths(paths) {\n  return paths.join('/').replace(/\\/\\/+/g, '/');\n};\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === '*';\n};\nfunction computeScore(path, index) {\n  var segments = path.split('/');\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    if (paramRe.test(segment)) {\n      return score + dynamicSegmentValue;\n    }\n    if (segment === '') {\n      return score + emptySegmentValue;\n    }\n    return score + staticSegmentValue;\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? a[a.length - 1] - b[b.length - 1] : 0;\n}\nfunction flattenRoutes(routes) {\n  var branches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var parentsMeta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var parentPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  routes.forEach(function (route, index) {\n    var _a;\n    if (typeof route.path !== 'string' && !route.index && !((_a = route.children) === null || _a === void 0 ? void 0 : _a.length)) {\n      throw new Error('useBreadcrumbs: `path` or `index` must be provided in every route object');\n    }\n    if (route.path && route.index) {\n      throw new Error('useBreadcrumbs: `path` and `index` cannot be provided at the same time');\n    }\n    var meta = {\n      relativePath: route.path || '',\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.charAt(0) === '/') {\n      if (!meta.relativePath.startsWith(parentPath)) {\n        throw new Error('useBreadcrumbs: The absolute path of the child route must start with the parent path');\n      }\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta);\n    if (route.children && route.children.length > 0) {\n      if (route.index) {\n        throw new Error('useBreadcrumbs: Index route cannot have child routes');\n      }\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  });\n  return branches;\n}\nfunction rankRouteBranches(branches) {\n  return branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar NO_BREADCRUMB = Symbol('NO_BREADCRUMB');\nvar humanize = function humanize(str) {\n  return str.replace(/^[\\s_]+|[\\s_]+$/g, '').replace(/[-_\\s]+/g, ' ').replace(/^[a-z]/, function (m) {\n    return m.toUpperCase();\n  });\n};\nvar render = function render(_ref) {\n  var Breadcrumb = _ref.breadcrumb,\n    match = _ref.match,\n    location = _ref.location,\n    props = _ref.props;\n  var componentProps = Object.assign({\n    match: match,\n    location: location,\n    key: match.pathname\n  }, props || {});\n  return Object.assign(Object.assign({}, componentProps), {\n    breadcrumb: typeof Breadcrumb === 'string' ? /*#__PURE__*/createElement('span', {\n      key: componentProps.key\n    }, Breadcrumb) : /*#__PURE__*/React.createElement(Breadcrumb, Object.assign({}, componentProps))\n  });\n};\nvar getDefaultBreadcrumb = function getDefaultBreadcrumb(_ref2) {\n  var currentSection = _ref2.currentSection,\n    location = _ref2.location,\n    pathSection = _ref2.pathSection,\n    defaultFormatter = _ref2.defaultFormatter;\n  var match = matchPath({\n    end: true,\n    path: pathSection\n  }, pathSection);\n  return render({\n    breadcrumb: defaultFormatter ? defaultFormatter(currentSection) : humanize(currentSection),\n    match: match,\n    location: location\n  });\n};\nvar getBreadcrumbMatch = function getBreadcrumbMatch(_ref3) {\n  var currentSection = _ref3.currentSection,\n    disableDefaults = _ref3.disableDefaults,\n    excludePaths = _ref3.excludePaths,\n    defaultFormatter = _ref3.defaultFormatter,\n    location = _ref3.location,\n    pathSection = _ref3.pathSection,\n    branches = _ref3.branches;\n  var breadcrumb;\n  var getIsPathExcluded = function getIsPathExcluded(path) {\n    return matchPath({\n      path: path,\n      end: true\n    }, pathSection) != null;\n  };\n  if (excludePaths && excludePaths.some(getIsPathExcluded)) {\n    return NO_BREADCRUMB;\n  }\n  branches.some(function (_ref4) {\n    var path = _ref4.path,\n      routesMeta = _ref4.routesMeta;\n    var route = routesMeta[routesMeta.length - 1].route;\n    var userProvidedBreadcrumb = route.breadcrumb;\n    if (!userProvidedBreadcrumb && route.index) {\n      var parentMeta = routesMeta[routesMeta.length - 2];\n      if (parentMeta && parentMeta.route.breadcrumb) {\n        userProvidedBreadcrumb = parentMeta.route.breadcrumb;\n      }\n    }\n    var caseSensitive = route.caseSensitive,\n      props = route.props;\n    var match = matchPath({\n      path: path,\n      end: true,\n      caseSensitive: caseSensitive\n    }, pathSection);\n    if (match && userProvidedBreadcrumb === null) {\n      breadcrumb = NO_BREADCRUMB;\n      return true;\n    }\n    if (match) {\n      if (!userProvidedBreadcrumb && disableDefaults) {\n        breadcrumb = NO_BREADCRUMB;\n        return true;\n      }\n      breadcrumb = render({\n        breadcrumb: userProvidedBreadcrumb || (defaultFormatter ? defaultFormatter(currentSection) : humanize(currentSection)),\n        match: Object.assign(Object.assign({}, match), {\n          route: route\n        }),\n        location: location,\n        props: props\n      });\n      return true;\n    }\n    return false;\n  });\n  if (breadcrumb) {\n    return breadcrumb;\n  }\n  if (disableDefaults) {\n    return NO_BREADCRUMB;\n  }\n  return getDefaultBreadcrumb({\n    pathSection: pathSection,\n    currentSection: pathSection === '/' ? 'Home' : currentSection,\n    location: location,\n    defaultFormatter: defaultFormatter\n  });\n};\nvar getBreadcrumbs = function getBreadcrumbs(_ref5) {\n  var routes = _ref5.routes,\n    location = _ref5.location,\n    _ref5$options = _ref5.options,\n    options = _ref5$options === void 0 ? {} : _ref5$options;\n  var pathname = location.pathname;\n  var branches = rankRouteBranches(flattenRoutes(routes));\n  var breadcrumbs = [];\n  pathname.split('?')[0].split('/').reduce(function (previousSection, currentSection, index) {\n    var pathSection = !currentSection ? '/' : \"\".concat(previousSection, \"/\").concat(currentSection);\n    if (pathSection === '/' && index !== 0) {\n      return '';\n    }\n    var breadcrumb = getBreadcrumbMatch(Object.assign({\n      currentSection: currentSection,\n      location: location,\n      pathSection: pathSection,\n      branches: branches\n    }, options));\n    if (breadcrumb !== NO_BREADCRUMB) {\n      breadcrumbs.push(breadcrumb);\n    }\n    return pathSection === '/' ? '' : pathSection;\n  }, '');\n  return breadcrumbs;\n};\nvar useReactRouterBreadcrumbs = function useReactRouterBreadcrumbs(routes, options) {\n  return getBreadcrumbs({\n    routes: routes || [],\n    location: useLocation(),\n    options: options\n  });\n};\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\nfunction createRoutesFromChildren(children) {\n  var routes = [];\n  React.Children.forEach(children, function (element) {\n    if (! /*#__PURE__*/React.isValidElement(element)) {\n      return;\n    }\n    if (element.type === React.Fragment) {\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n    invariant(element.type === Route, \"[\".concat(typeof element.type === 'string' ? element.type : element.type.name, \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\"));\n    var route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n      breadcrumb: element.props.breadcrumb\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\nvar BreadCrumbRoute = Route;\nexport { BreadCrumbRoute as Route, createRoutesFromChildren, useReactRouterBreadcrumbs as default, getBreadcrumbs, humanize };","map":null,"metadata":{},"sourceType":"module"}